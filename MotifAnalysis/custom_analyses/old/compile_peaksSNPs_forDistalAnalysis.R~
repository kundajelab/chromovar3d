
#Add peak annotations to the distal QTL file
#============================================

distal.f='/srv/gs1/projects/snyder/jzaugg/histoneQTL/hQTL_analysis/results/20140622_newPeaks/DistQTL_list/HiC_local_QTL_dist_QTL.all.txt'
qtl=read.table(distal.f,header=T,sep='\t')
qtl=cbind(qtl,peak1.name=paste(qtl$distQTL,'chr',qtl$chr,':',qtl$peak1.start,'_',qtl$peak1.end,sep=''))

#make a combinedAnno that has comma-separated values when multiple items fit.
#peak name to peak id.
first=T
pAnno.t='/srv/gs1/projects/snyder/jzaugg/histoneQTL/peakAnnotation/peakLocations.ALL.HMARK.txt'
signal.t='/srv/gs1/projects/snyder/jzaugg/histoneQTL/hQTL_analysis/PeakData/hMat.norm.ALL.HMARK.peer_lS_5.txt'
hmarks=c('H3K4ME1','H3K4ME3','H3K27AC','RNA','dhs')
for (hmark in hmarks){
    print(hmark)
    curAnno=read.table(gsub('HMARK',hmark,pAnno.t),header=T)
    if (hmark=='dhs'){
       curAnno=cbind(curAnno[,c('id','chr','start','end')],name=paste(hmark,curAnno$chr,':',curAnno$start,'_',curAnno$end,sep=''))
    }
    if (hmark!='dhs'){
       curAnno=cbind(curAnno[,c('id','chr','start','end')],name=paste(hmark,'chr',curAnno$chr,':',curAnno$start,'_',curAnno$end,sep=''))
    }
    name2id=aggregate(id ~ name,curAnno,paste)
    rownames(name2id)=name2id[,1]
    name2id[,'id']=paste(hmark,'_',as.character(name2id$id),sep='')

    if (!first){
       anno=rbind(anno,name2id)
    }
    if (first){
       anno=name2id
       first=F
    }   
}

qtl=cbind(qtl, gene=anno[as.character(qtl$peak1.name),'id'])
if (length(which(grepl(',',as.character(qtl$gene))))>0){
print('need to deal with duplicates')
}

#Now, need to also annotate peak2, since from that one I am getting the snps
#Go through each line from qtl, and get the relevant SNPs
get_peak2=function(i,qtl,anno){
	curLine=qtl[i,]
	peak2s=paste(strsplit(as.character(curLine$distSNP_localQTL_comb),',')[[1]],'chr',curLine$chr,':',curLine$peak2.start,'_',curLine$peak2.end,sep='')
	peak2.id=anno[intersect(peak2s,rownames(anno)),'id'][1]
	if (length(peak2.id)==0){
	   return('NA')
	}
	return(peak2.id)
}

numGroups=500
group_tests=split(1:nrow(qtl),rep(1:numGroups,each=nrow(qtl)/numGroups+1))
first=T
for (group_id in names(group_tests)){
    print(group_id)
    #if (as.numeric(as.character(group_id)) > 10){
    #   break
    #}
    peak2.ids.computed=lapply(group_tests[[group_id]],get_peak2,qtl=qtl,anno=anno)
    #print(group_tests[[group_id]])
    #print(peak2.ids.computed)
    if (first==FALSE){
       full_peak2s=c(full_peak2s,peak2.ids.computed)
    }
    if (first==TRUE){
       full_peak2s=peak2.ids.computed
       first=F
    }
}

peak2_ids.final=as.vector(unlist(full_peak2s))
newqtl=cbind(qtl[1:length(peak2_ids.final),],peak2.id=peak2_ids.final)
write.table(newqtl,file='/srv/gs1/projects/snyder/jzaugg/histoneQTL/motif_analysis/results/2014-07-28/HiC_local_QTL_dist_QTL.all.txt_augmentPeak1Peak2IDs.txt',sep='\t',quote=F,row.names=F,col.names=T)

newqtl2=newqtl[,c('chr','gene','peak2.id')]
write.table(newqtl2,file='/srv/gs1/projects/snyder/jzaugg/histoneQTL/motif_analysis/results/2014-07-28/HiC_local_QTL_dist_QTL.all.txt_augmentPeak1Peak2IDs.ChrGenePeak2txt',sep='\t',quote=F,row.names=F,col.names=T)